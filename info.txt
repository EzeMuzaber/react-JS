estilos posibles:
css in jsx
styled components
tailwind <- recomienda este
boostrap    
ant design


**uso de props**
<Usecard
nombre={nombre}
edad={edad}
esProgramador={true}
lenguajes={["js", "reactJS"]}
direccion={{ direccion: "calle falsa", numero: 3400 }}
/> 

PARA CREAR UN CARRITO CON CONTADOR:
contador:
import { ShoppingCart } from "lucide-react";

function NavBar() {
    const [contador,setCounter] =useState(0)
    const handleClick = () =>{
        setCounter(contador +1)
    }
    return (
        <nav className="hidden md:flex md:gap-4">
            <a href="#" className="mr-4">Inicio</a>
            <a href="#" className="mr-4">Mundo</a>

            <div className="flex" onClick={handleClick}>
            <a href="#" className="mr-4 ">Compras </a>
            <ShoppingCart onClick={handleClick}>

            </ShoppingCart>

        </div>                     
            <a href="#" className="mr-4">Contacto</a>
            {/* <MenuOutlined/> */}
            <Menu />
           
        </nav>
    )
}


//const [count, setCount] = useState(0)
 /* <>
      <div>
        <a href="https://vitejs.dev" target="_blank">
          <img src={viteLogo} className="logo" alt="Vite logo" />
        </a>
        <a href="https://react.dev" target="_blank">
          <img src={reactLogo} className="logo react" alt="React logo" />
        </a>
      </div>
      <h1>Vite + React</h1>
      <div className="card">
        <button onClick={() => setCount((count) => count + 1)}>
          count is {count}
        </button>
        <p>
          Edit <code>src/App.jsx</code> and save to test HMR
        </p>
      </div>
      <p className="read-the-docs">
        Click on the Vite and React logos to learn more
      </p>
    </>
   */

  -------------------------------
  <h1>Rick and Morty</h1>
        <div className={`user-card p-4 rounded-md shadow-md hover:scale-105 transition group`}>
            {characters.map((character) => (
                <div key={character.id} className="mb-4">
                    <div className="overflow-hidden aspect-video">
                        <img className="w-full transition-all duration-500 rounded-md grayscale group-hover:grayscale-0 group-hover:scale-150"
                            src={character.image} alt="card image" />
                    </div>
                    <h2 className="my-2 font-bold">{character.name}</h2>
                    <Button className="my-2">Ver más</Button>{/* Aquí necesitas añadir la URL correspondiente */}
                    
                </div>
            ))}
        </div>
    </div>
  -------------------------------
  /* cambio de estado */

/* const elResultadoDelHook= useState("Manolo")
const nombre = elResultadoDelHook[0]
const setNombre = elResultadoDelHook[1] */
/* haciendo destrocturing  queda asi:*/

//const [nombre, setNombre] = useState("Manolo")

/* contador ++ */
/* const [contador,setCounter] =useState(0)
const handleClick = () =>{
    setNombre("Sonic")
    setCounter(contador +1) 
} */

  -------------------------------
  primer user card original
/* <div className={`user-card p-4 rounded-md shadow-md hover:scale-105 transition group 
        ${nombre === "Manolo" ? "bg-red-400" : "bg-blue-300"}`}>
             <img className= "w-full rounded-md grayscale group-hover:grayscale-0 aspect-auto max-w-xxs"
            src="https://picsum.photos/400" alt="card image"/>
            <h2 className="my-2">{nombre}</h2>
            <Button className="my-2">Ver mas</Button>{ */}/* aca tiene que ir un href hacia la pagina correspondendiente */
/*<Button onClick={handleClick}>Like
<span>{contador}</span></Button>
</div> */


  -------------------------------
  parte de movie sola sin enlazar con serie
/*  useEffect(() => {
        const fetchDescripcion = async () => {
            try {
                const response = await axios.get(`https://api.themoviedb.org/3/movie/${movie.id}?api_key=48a0c06b9ea9cc8b30766de05c8d4470&language=es`);
                setDescripcion(response.data.overview);
            } catch (error) {
                console.error('Error fetching movie description:', error);
            }
        };
        fetchDescripcion();
    }, [movie.id]);
    const handleImageClick = () => {
        setImagenAmpliada(!imagenAmpliada);
        if (imagenAmpliada) {
            setImagen(backdrop_path);
        } else {
            
            setImagen(poster_path);
        }
    }*/

/*  return (
    <div>
        <div className="user-card p-4 rounded-md shadow-md  group">
            <div className="overflow-hidden aspect-auto relative">
                <img className={`w-full rounded-md grayscale group-hover:grayscale-0 duration-500 cursor-pointer ${imagenAmpliada ? 'scale-normal' : 'group-hover:scale-125'}`}
                    src={`https://image.tmdb.org/t/p/w500/${imagen}`} alt="card image" onClick={handleImageClick} />
                <div className="absolute bottom-2 right-2 text-violet-500 p-1 font-bold">
                    <FontAwesomeIcon icon={faCircleNotch} className="mr-1" /> {porcentajeVoto}%
                </div>
            </div>
            <h2 className="my-2 font-bold">{movie.title}</h2>

            <Button onClick={handleClick}>{mostrarInfoExtra ? "Ver menos" : "Ver más"}</Button>
            <Button onClick={handleClick1} className='ml-3'>Like
                <span>{contador}</span>
            </Button>
            {mostrarInfoExtra && (
                <>
                    <p className="my-2">
                        <span className="font-bold">Descripcion:</span> {descripcion}</p>

                </>
            )}

        </div>
    </div>
); */